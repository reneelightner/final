{"ast":null,"code":"var _jsxFileName = \"/Users/reneelightner/reneelempert/react-development-course-materials/final/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Chart from './Chart.js';\nimport { useState } from 'react';\nimport Artists from './Artists.js';\nimport Favs from './Favs.js';\nimport grammysJSON from './data/dataGrammys.json';\nimport mtvJSON from './data/dataMTV.json';\nimport billboardJSON from './data/dataBillboard.json';\nimport amaJSON from './data/dataAMA.json';\nimport superbowlJSON from './data/dataSuperBowl.json';\nimport { Markup } from 'interweave'; // award names for each award show\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst grammysAwards = [...new Set(grammysJSON.map(item => item['AWARD']))];\nconst mtvAwards = [...new Set(mtvJSON.map(item => item['AWARD']))];\nconst billboardAwards = [...new Set(billboardJSON.map(item => item['AWARD']))];\nconst amaAwards = [...new Set(amaJSON.map(item => item['AWARD']))];\nconst superBowlAwards = [...new Set(superbowlJSON.map(item => item['AWARD']))]; // get artist names for drop down:\n// create array of unique artist names\n\nlet artistArray = [...new Set(grammysJSON.map(item => item['ART-1']))];\ngrammysJSON.forEach(function (award) {\n  if (!artistArray.includes(award['ART-2'])) {\n    artistArray.push(award['ART-2']);\n  }\n\n  if (!artistArray.includes(award['ART-3'])) {\n    artistArray.push(award['ART-3']);\n  }\n});\nmtvJSON.forEach(function (award) {\n  if (!artistArray.includes(award['ART-1'])) {\n    artistArray.push(award['ART-1']);\n  }\n\n  if (!artistArray.includes(award['ART-2'])) {\n    artistArray.push(award['ART-2']);\n  }\n\n  if (!artistArray.includes(award['ART-3'])) {\n    artistArray.push(award['ART-3']);\n  }\n});\nbillboardJSON.forEach(function (award) {\n  if (!artistArray.includes(award['ART-1'])) {\n    artistArray.push(award['ART-1']);\n  }\n\n  if (!artistArray.includes(award['ART-2'])) {\n    artistArray.push(award['ART-2']);\n  }\n\n  if (!artistArray.includes(award['ART-3'])) {\n    artistArray.push(award['ART-3']);\n  }\n});\namaJSON.forEach(function (award) {\n  if (!artistArray.includes(award['ART-1'])) {\n    artistArray.push(award['ART-1']);\n  }\n});\nsuperbowlJSON.forEach(function (award) {\n  if (!artistArray.includes(award['ART-1'])) {\n    artistArray.push(award['ART-1']);\n  }\n\n  if (!artistArray.includes(award['ART-2'])) {\n    artistArray.push(award['ART-2']);\n  }\n\n  if (!artistArray.includes(award['ART-3'])) {\n    artistArray.push(award['ART-3']);\n  }\n\n  if (!artistArray.includes(award['ART-4'])) {\n    artistArray.push(award['ART-4']);\n  }\n\n  if (!artistArray.includes(award['ART-5'])) {\n    artistArray.push(award['ART-5']);\n  }\n\n  if (!artistArray.includes(award['ART-6'])) {\n    artistArray.push(award['ART-6']);\n  }\n}); // filter out any empty artists\n\nartistArray = artistArray.filter(item => {\n  return item !== \"\";\n}); // sort artist array in alpa order\n\nartistArray = artistArray.sort(); // make array of objects - each obj is an artist (used for drop down options)\n\nconst artistOptions = artistArray.map(artist => {\n  return {\n    text: artist,\n    value: artist\n  };\n});\nexport default function App() {\n  _s();\n\n  const [artist, setArtist] = useState('none');\n  const [favs, setFavs] = useState([]);\n  const [grammysCountArtist, setgrammysCountArtist] = useState(0);\n  const [mtvCountArtist, setmtvCountArtist] = useState(0);\n  const [billboardCountArtist, setbillboardCountArtist] = useState(0);\n  const [amaCountArtist, setamaCountArtist] = useState(0);\n  const [superbowlCountArtist, setsuperbowlCountArtist] = useState(0);\n  const [artistSummary, setartistSummary] = useState(' ');\n  const [value, setValue] = useState(null);\n  const [showFavBtn, setshowFavBtn] = React.useState(false);\n\n  const handleArtistSelection = artist => {\n    setValue(artist);\n    setArtist(artist);\n    getArtistSummary(artist);\n    setshowFavBtn(true);\n    let grammyCount = getArtistCount(grammysJSON, artist);\n    setgrammysCountArtist(grammyCount);\n    let mtvCount = getArtistCount(mtvJSON, artist);\n    setmtvCountArtist(mtvCount);\n    let billboardCount = getArtistCount(billboardJSON, artist);\n    setbillboardCountArtist(billboardCount);\n    let amaCount = getArtistCount(amaJSON, artist);\n    setamaCountArtist(amaCount);\n    let superbowlCount = getArtistCount(superbowlJSON, artist);\n    setsuperbowlCountArtist(superbowlCount);\n  };\n\n  function getArtistCount(data, artist) {\n    let count = 0;\n\n    for (let k of data) {\n      if (k['ART-1'] == artist) {\n        count++;\n      }\n\n      if (k['ART-2'] == artist) {\n        count++;\n      }\n\n      if (k['ART-3'] == artist) {\n        count++;\n      }\n    }\n\n    ;\n    return count;\n  }\n\n  const lastfm = {\n    api_key: 'a36b582801c6e46141b9896f2b65b1c4'\n  }; // multiple artist with this name on last fm so we need to fix summary\n\n  const artistsFixSummary = ['Chris Brown', 'Creed', 'Eve', 'John Mayer', 'Next', 'Nirvana', 'Roger Miller', 'The Cars', 'Zayn'];\n\n  function getArtistSummary(artist) {\n    artist = artist.replace(/’/g, '%27');\n    artist = artist.replace(/&/g, '%26');\n    const url = `http://ws.audioscrobbler.com/2.0/?method=artist.getinfo&artist=${artist}&api_key=${lastfm.api_key}&format=json`;\n    fetch(url).then(response => {\n      return response.json();\n    }).then(data => {\n      let summary = data.artist.bio.summary;\n\n      if (artistsFixSummary.includes(artist)) {\n        summary = fixArtistSummary(artist, summary);\n      }\n\n      setartistSummary(summary);\n    });\n  }\n\n  function fixArtistSummary(artist, summary) {\n    switch (artist) {\n      case 'Chris Brown':\n        {\n          summary = summary.split('There is more than one artist with this name:\\n\\n1)');\n          return summary[1];\n        }\n\n      case 'Creed':\n        {\n          summary = summary.split('A German metal band\\n\\n');\n          return summary[1];\n        }\n\n      case 'Eve':\n        {\n          summary = summary.split('EVE - Brazilian girl group\\n\\n1.');\n          return summary[1];\n        }\n\n      case 'John Mayer':\n        {\n          summary = summary.split('Indo Jazz Fusions\\n\\n1)');\n          return summary[1];\n        }\n\n      case 'Next':\n        {\n          summary = summary.split('A Japanese hardcore/\"melodicore\"/\"screamo\" band\\n\\n1.-');\n          return summary[1];\n        }\n\n      case 'Nirvana':\n        {\n          summary = summary.split('listed in order of prominence:\\n\\n1)');\n          return summary[1];\n        }\n\n      case 'Roger Miller':\n        {\n          summary = summary.split('songwriter from Massachusetts, USA\\n\\n1)');\n          return summary[1];\n        }\n\n      case 'The Cars':\n        {\n          summary = summary.split('There is more than one artist with this name:\\n\\n1)');\n          return summary[1];\n        }\n\n      case 'Zayn':\n        {\n          summary = summary.split('There are two artists with this name:\\n\\n1.)');\n          return summary[1];\n        }\n    }\n  }\n\n  const handleFavArtist = (add, theartist) => {\n    let currFavs = favs;\n\n    if (!favs.includes(theartist) && add) {\n      currFavs.push(theartist);\n      setFavs([...currFavs]);\n    } else if (favs.includes(theartist)) {\n      let index = currFavs.indexOf(theartist);\n      currFavs.splice(index, 1);\n      setFavs([...currFavs]);\n    }\n  };\n\n  const pickedFavs = () => {\n    if (favs.length) {\n      let favsArr = favs.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(Favs, {\n          artist: item,\n          artistSelection: handleArtistSelection,\n          handleAristRemove: handleFavArtist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 16\n        }, this);\n      });\n      return favsArr;\n    } else {\n      return 'There are currently no favoriite artists selected.';\n    }\n  };\n\n  const artistAwardText = () => {\n    if (artist === 'none') {\n      return 'Choose an artist to see their award(s)';\n    } else {\n      return `Awards for ${artist}`;\n    }\n  };\n\n  const artistSummaryText = () => {\n    if (artist === 'none') {\n      return 'Choose an artist to read more about them';\n    } else {\n      return `About ${artist}`;\n    }\n  };\n\n  const chartData = [{\n    data: grammysJSON,\n    awards: grammysAwards,\n    awardCountForArist: grammysCountArtist,\n    id: 'grammy',\n    height: 130,\n    show: 'Grammys'\n  }, {\n    data: mtvJSON,\n    awards: mtvAwards,\n    awardCountForArist: mtvCountArtist,\n    id: 'mtv',\n    height: 170,\n    show: 'MTV Video Music Awards'\n  }];\n\n  const FavBtn = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => {\n      handleFavArtist(true, artist);\n    },\n    children: \"\\u2764\\uFE0F\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Explore Music Award Show Winners\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Pick an Artist:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Artists, {\n      options: artistOptions,\n      onArtistChange: handleArtistSelection,\n      placeholder: 'Artists',\n      value: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: artistSummaryText()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), showFavBtn ? /*#__PURE__*/_jsxDEV(FavBtn, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 22\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(Markup, {\n        content: artistSummary\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Favorite Artists:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: pickedFavs()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select the \\u2764\\uFE0F icon to add a favorite artist. Click X to remove one.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: artistAwardText()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      data: grammysJSON,\n      awards: grammysAwards,\n      awardCountForArist: grammysCountArtist,\n      id: 'grammy',\n      height: 130,\n      show: \"Grammys\",\n      artist: artist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      data: mtvJSON,\n      awards: mtvAwards,\n      awardCountForArist: mtvCountArtist,\n      id: 'mtv',\n      height: 170,\n      show: \"MTV Video Music Awards\",\n      artist: artist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      data: billboardJSON,\n      awards: billboardAwards,\n      awardCountForArist: billboardCountArtist,\n      id: 'billboard',\n      height: 170,\n      show: \"Billboard Music Awards\",\n      artist: artist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      data: amaJSON,\n      awards: amaAwards,\n      awardCountForArist: amaCountArtist,\n      id: 'ama',\n      height: 120,\n      show: \"American Music Awards\",\n      artist: artist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      data: superbowlJSON,\n      awards: superBowlAwards,\n      awardCountForArist: superbowlCountArtist,\n      id: 'superbowl',\n      height: 60,\n      show: \"Super Bowl Half Time Show\",\n      artist: artist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"D22BWKjWVpqA/tuofjRlE/Z3n48=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/reneelightner/reneelempert/react-development-course-materials/final/src/App.js"],"names":["Chart","useState","Artists","Favs","grammysJSON","mtvJSON","billboardJSON","amaJSON","superbowlJSON","Markup","grammysAwards","Set","map","item","mtvAwards","billboardAwards","amaAwards","superBowlAwards","artistArray","forEach","award","includes","push","filter","sort","artistOptions","artist","text","value","App","setArtist","favs","setFavs","grammysCountArtist","setgrammysCountArtist","mtvCountArtist","setmtvCountArtist","billboardCountArtist","setbillboardCountArtist","amaCountArtist","setamaCountArtist","superbowlCountArtist","setsuperbowlCountArtist","artistSummary","setartistSummary","setValue","showFavBtn","setshowFavBtn","React","handleArtistSelection","getArtistSummary","grammyCount","getArtistCount","mtvCount","billboardCount","amaCount","superbowlCount","data","count","k","lastfm","api_key","artistsFixSummary","replace","url","fetch","then","response","json","summary","bio","fixArtistSummary","split","handleFavArtist","add","theartist","currFavs","index","indexOf","splice","pickedFavs","length","favsArr","artistAwardText","artistSummaryText","chartData","awards","awardCountForArist","id","height","show","FavBtn"],"mappings":"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","sourcesContent":["import './App.css';\nimport Chart from './Chart.js';\nimport {useState} from 'react';\nimport Artists from './Artists.js';\nimport Favs from './Favs.js';\nimport grammysJSON from './data/dataGrammys.json';\nimport mtvJSON from './data/dataMTV.json';\nimport billboardJSON from './data/dataBillboard.json';\nimport amaJSON from './data/dataAMA.json';\nimport superbowlJSON from './data/dataSuperBowl.json';\nimport { Markup } from 'interweave';\n\n// award names for each award show\nconst grammysAwards = [...new Set(grammysJSON.map(item => item['AWARD']))];\nconst mtvAwards = [...new Set(mtvJSON.map(item => item['AWARD']))];\nconst billboardAwards = [...new Set(billboardJSON.map(item => item['AWARD']))];\nconst amaAwards = [...new Set(amaJSON.map(item => item['AWARD']))];\nconst superBowlAwards = [...new Set(superbowlJSON.map(item => item['AWARD']))];\n\n// get artist names for drop down:\n// create array of unique artist names\nlet artistArray = [...new Set(grammysJSON.map(item => item['ART-1']))];\ngrammysJSON.forEach(function (award) {\n\tif (!artistArray.includes(award['ART-2'])) {artistArray.push(award['ART-2'])}\n  if (!artistArray.includes(award['ART-3'])) {artistArray.push(award['ART-3'])}\n}); \nmtvJSON.forEach(function (award) {\n\tif (!artistArray.includes(award['ART-1'])) {artistArray.push(award['ART-1'])}\n  if (!artistArray.includes(award['ART-2'])) {artistArray.push(award['ART-2'])}\n  if (!artistArray.includes(award['ART-3'])) {artistArray.push(award['ART-3'])}\n});\nbillboardJSON.forEach(function (award) {\n\tif (!artistArray.includes(award['ART-1'])) {artistArray.push(award['ART-1'])}\n  if (!artistArray.includes(award['ART-2'])) {artistArray.push(award['ART-2'])}\n  if (!artistArray.includes(award['ART-3'])) {artistArray.push(award['ART-3'])}\n});\namaJSON.forEach(function (award) {\n\tif (!artistArray.includes(award['ART-1'])) {artistArray.push(award['ART-1'])}\n});\nsuperbowlJSON.forEach(function (award) {\n\tif (!artistArray.includes(award['ART-1'])) {artistArray.push(award['ART-1'])}\n  if (!artistArray.includes(award['ART-2'])) {artistArray.push(award['ART-2'])}\n  if (!artistArray.includes(award['ART-3'])) {artistArray.push(award['ART-3'])}\n  if (!artistArray.includes(award['ART-4'])) {artistArray.push(award['ART-4'])}\n  if (!artistArray.includes(award['ART-5'])) {artistArray.push(award['ART-5'])}\n  if (!artistArray.includes(award['ART-6'])) {artistArray.push(award['ART-6'])}\n});\n// filter out any empty artists\nartistArray = artistArray.filter(item => {\n  return item !== \"\"\n})\n// sort artist array in alpa order\nartistArray = artistArray.sort();\n// make array of objects - each obj is an artist (used for drop down options)\nconst artistOptions = artistArray.map((artist) => { return {text: artist, value: artist} });\n\n\n\nexport default function App() {\n  const [artist, setArtist] = useState('none');\n  const [favs, setFavs] = useState([]);\n  const [grammysCountArtist, setgrammysCountArtist] = useState(0);\n  const [mtvCountArtist, setmtvCountArtist] = useState(0);\n  const [billboardCountArtist, setbillboardCountArtist] = useState(0);\n  const [amaCountArtist, setamaCountArtist] = useState(0);\n  const [superbowlCountArtist, setsuperbowlCountArtist] = useState(0);\n  const [artistSummary, setartistSummary] = useState(' ');\n  const [value, setValue] = useState(null);\n  const [showFavBtn, setshowFavBtn] = React.useState(false)\n\n  const handleArtistSelection = (artist) => {\n    setValue(artist);\n    setArtist(artist);\n    getArtistSummary(artist);\n    setshowFavBtn(true);\n\n    let grammyCount = getArtistCount(grammysJSON, artist);\n    setgrammysCountArtist(grammyCount);\n\n    let mtvCount = getArtistCount(mtvJSON, artist);\n    setmtvCountArtist(mtvCount);\n\n    let billboardCount = getArtistCount(billboardJSON, artist);\n    setbillboardCountArtist(billboardCount);\n\n    let amaCount = getArtistCount(amaJSON, artist);\n    setamaCountArtist(amaCount);\n\n    let superbowlCount = getArtistCount(superbowlJSON, artist);\n    setsuperbowlCountArtist(superbowlCount);\n  }\n\n  function getArtistCount(data, artist) {\n    let count = 0;\n    for (let k of data) {\n      if (k['ART-1'] == artist) { count++; }\n      if (k['ART-2'] == artist) { count++; }\n      if (k['ART-3'] == artist) { count++; }\n    };\n    return count;\n  }\n\n  const lastfm = {\n    api_key: 'a36b582801c6e46141b9896f2b65b1c4'\n  }\n\n  // multiple artist with this name on last fm so we need to fix summary\n  const artistsFixSummary = ['Chris Brown', 'Creed', 'Eve', 'John Mayer', 'Next', 'Nirvana', 'Roger Miller', 'The Cars', 'Zayn'];\n\n  function getArtistSummary(artist) {\n    artist = artist.replace(/’/g, '%27');\n    artist = artist.replace(/&/g, '%26');\n    const url = `http://ws.audioscrobbler.com/2.0/?method=artist.getinfo&artist=${artist}&api_key=${lastfm.api_key}&format=json`;\n    fetch(url)\n      .then((response) => {\n        return response.json();\n      }).then((data) => {\n        let summary = data.artist.bio.summary;\n        if (artistsFixSummary.includes(artist)) {\n          summary = fixArtistSummary(artist, summary);\n        }\n        setartistSummary(summary);\n      });\n  }\n\n  function fixArtistSummary(artist, summary) {\n    switch (artist) {\n      case 'Chris Brown': {\n        summary = summary.split('There is more than one artist with this name:\\n\\n1)');\n        return summary[1];\n      }\n      case 'Creed': {\n        summary = summary.split('A German metal band\\n\\n');\n        return summary[1];\n      }\n      case 'Eve': {\n        summary = summary.split('EVE - Brazilian girl group\\n\\n1.');\n        return summary[1];\n      }\n      case 'John Mayer': {\n        summary = summary.split('Indo Jazz Fusions\\n\\n1)');\n        return summary[1];\n      }\n      case 'Next': {\n        summary = summary.split('A Japanese hardcore/\"melodicore\"/\"screamo\" band\\n\\n1.-');\n        return summary[1];\n      }\n      case 'Nirvana': {\n        summary = summary.split('listed in order of prominence:\\n\\n1)');\n        return summary[1];\n      }\n      case 'Roger Miller': {\n        summary = summary.split('songwriter from Massachusetts, USA\\n\\n1)');\n        return summary[1];\n      }\n      case 'The Cars': {\n        summary = summary.split('There is more than one artist with this name:\\n\\n1)');\n        return summary[1];\n      }\n      case 'Zayn': {\n        summary = summary.split('There are two artists with this name:\\n\\n1.)');\n        return summary[1];\n      }\n    }\n  }\n\n  const handleFavArtist = (add, theartist) => {\n    let currFavs = favs;\n    if (!favs.includes(theartist) && add) {\n      currFavs.push(theartist);\n      setFavs([...currFavs]);\n    } else if (favs.includes(theartist)) {\n      let index = currFavs.indexOf(theartist);\n      currFavs.splice(index, 1);\n      setFavs([...currFavs]);\n    }\n  }\n\n  const pickedFavs = () => {\n    if (favs.length) {\n      let favsArr = favs.map((item, index)=>{\n        return <Favs artist={item} artistSelection={handleArtistSelection} handleAristRemove={handleFavArtist}></Favs>\n      });\n      return favsArr;\n    } else {\n      return 'There are currently no favoriite artists selected.';\n    }\n  }\n\n  const artistAwardText = () => {\n    if (artist === 'none') {\n      return 'Choose an artist to see their award(s)';\n    } else {\n      return `Awards for ${artist}`;\n    }\n  }\n\n  const artistSummaryText = () => {\n    if (artist === 'none') {\n      return 'Choose an artist to read more about them';\n    } else {\n      return `About ${artist}`;\n    }\n  }\n\n  const chartData = [\n    {\n      data: grammysJSON,\n      awards: grammysAwards,\n      awardCountForArist: grammysCountArtist,\n      id: 'grammy',\n      height: 130,\n      show: 'Grammys'\n    },\n    {\n      data: mtvJSON,\n      awards: mtvAwards,\n      awardCountForArist: mtvCountArtist,\n      id: 'mtv',\n      height: 170,\n      show: 'MTV Video Music Awards'\n    }\n  ];\n\n  const FavBtn = () => (\n    <button onClick={() => {handleFavArtist(true, artist)}}>❤️</button>\n  );\n\n  return (\n    <div className=\"App\">\n      <h1>Explore Music Award Show Winners</h1>\n      <span>Pick an Artist:</span>\n      <Artists options={artistOptions} onArtistChange={handleArtistSelection} placeholder={'Artists'} value={value}/>\n      <hr />\n      <h3>{artistSummaryText()}</h3>\n      { showFavBtn ? <FavBtn /> : null }\n      <p><Markup content={artistSummary}/></p>\n      <div>\n        <h5>Favorite Artists:</h5>\n        <div>{pickedFavs()}</div>\n        <p>Select the ❤️ icon to add a favorite artist. Click X to remove one.</p>\n      </div>\n      <hr />\n      <h3>{artistAwardText()}</h3>\n      <Chart data={grammysJSON} awards={grammysAwards} awardCountForArist={grammysCountArtist} id={'grammy'} height={130} show={\"Grammys\"} artist={artist} />\n      <Chart data={mtvJSON} awards={mtvAwards} awardCountForArist={mtvCountArtist} id={'mtv'} height={170} show={\"MTV Video Music Awards\"} artist={artist} />\n      <Chart data={billboardJSON} awards={billboardAwards} awardCountForArist={billboardCountArtist}  id={'billboard'} height={170} show={\"Billboard Music Awards\"} artist={artist} />\n      <Chart data={amaJSON} awards={amaAwards} awardCountForArist={amaCountArtist} id={'ama'} height={120} show={\"American Music Awards\"} artist={artist} />\n      <Chart data={superbowlJSON} awards={superBowlAwards} awardCountForArist={superbowlCountArtist} id={'superbowl'} height={60} show={\"Super Bowl Half Time Show\"} artist={artist} />\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}