{"ast":null,"code":"var _jsxFileName = \"/Users/reneelightner/reneelempert/react-development-course-materials/final/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Chart from './Chart.js';\nimport { useState } from 'react';\nimport Artists from './Artists.js';\nimport Favs from './Favs.js';\nimport grammysJSON from './data/dataGrammys.json';\nimport mtvJSON from './data/dataMTV.json';\nimport billboardJSON from './data/dataBillboard.json'; // award names for each award show\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst grammysAwards = [...new Set(grammysJSON.map(item => item['AWARD']))];\nconst mtvAwards = [...new Set(mtvJSON.map(item => item['AWARD']))];\nconst billboardAwards = [...new Set(billboardJSON.map(item => item['AWARD']))]; // get artist names for drop down:\n// create array of unique artist names\n\nlet artistArray = [...new Set(grammysJSON.map(item => item['ART-1']))];\ngrammysJSON.forEach(function (award) {\n  if (!artistArray.includes(award['ART-2'])) {\n    artistArray.push(award['ART-2']);\n  }\n\n  if (!artistArray.includes(award['ART-3'])) {\n    artistArray.push(award['ART-3']);\n  }\n});\nmtvJSON.forEach(function (award) {\n  if (!artistArray.includes(award['ART-1'])) {\n    artistArray.push(award['ART-1']);\n  }\n\n  if (!artistArray.includes(award['ART-2'])) {\n    artistArray.push(award['ART-2']);\n  }\n\n  if (!artistArray.includes(award['ART-3'])) {\n    artistArray.push(award['ART-3']);\n  }\n});\nbillboardJSON.forEach(function (award) {\n  if (!artistArray.includes(award['ART-1'])) {\n    artistArray.push(award['ART-1']);\n  }\n\n  if (!artistArray.includes(award['ART-2'])) {\n    artistArray.push(award['ART-2']);\n  }\n\n  if (!artistArray.includes(award['ART-3'])) {\n    artistArray.push(award['ART-3']);\n  }\n}); // filter out any empty artists\n\nartistArray = artistArray.filter(item => {\n  return item !== \"\";\n}); // sort artist array in alpa order\n\nartistArray = artistArray.sort(); // make array of objects - each obj is an artist (used for drop down options)\n\nconst artistOptions = artistArray.map(artist => {\n  return {\n    text: artist,\n    value: artist\n  };\n}); // App component\n\nexport default function App() {\n  _s();\n\n  const [artist, setArtist] = useState('none');\n  const [favs, setFavs] = useState(['Billie Eilish', 'Taylor Swift', 'Alicia Keys', 'BeyoncÃ©']);\n  const [grammysData, setgrammysData] = useState([...grammysJSON]);\n  const [grammysCountArtist, setgrammysCountArtist] = useState(0);\n  const [mtvData, setMtvData] = useState([...mtvJSON]);\n  const [mtvCountArtist, setmtvCountArtist] = useState(0);\n  const [billboardData, setBillboardData] = useState([...billboardJSON]);\n  const [billboardCountArtist, setbillboardCountArtist] = useState(0);\n\n  const handleArtistSelection = artist => {\n    setArtist(artist);\n    let grammyCount = getArtistCount(grammysData, artist);\n    setgrammysCountArtist(grammyCount);\n    let mtvCount = getArtistCount(mtvData, artist);\n    setmtvCountArtist(mtvCount);\n    let billboardCount = getArtistCount(billboardData, artist);\n    setbillboardCountArtist(billboardCount);\n  };\n\n  function getArtistCount(data, artist) {\n    let count = 0;\n\n    for (let k of data) {\n      if (k['ART-1'] == artist) {\n        count++;\n      }\n\n      if (k['ART-2'] == artist) {\n        count++;\n      }\n\n      if (k['ART-3'] == artist) {\n        count++;\n      }\n    }\n\n    ;\n    return count;\n  }\n\n  const handleFavArtist = (add, theartist) => {\n    let currFavs = favs;\n\n    if (!favs.includes(theartist) && add) {\n      currFavs.push(theartist);\n      setFavs([...currFavs]);\n    } else if (favs.includes(theartist)) {\n      let index = currFavs.indexOf(theartist);\n      currFavs.splice(index, 1);\n      setFavs([...currFavs]);\n    }\n  };\n\n  const pickedFavs = favs.map((item, index) => {\n    return /*#__PURE__*/_jsxDEV(Favs, {\n      artist: item,\n      artistSelection: handleArtistSelection,\n      handleAristRemove: handleFavArtist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 12\n    }, this);\n  });\n\n  const artistText = () => {\n    if (artist === 'none') {\n      return 'Choose an artist to see their award(s)';\n    } else {\n      return `Awards for ${artist}`;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Final Project\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: artistText()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        handleFavArtist(true, artist);\n      },\n      children: \"\\u2764\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Artists, {\n      options: artistOptions,\n      onArtistChange: handleArtistSelection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Favorite artists:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), pickedFavs]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      data: grammysData,\n      awards: grammysAwards,\n      awardCountForArist: grammysCountArtist,\n      id: 'grammy',\n      height: 130,\n      width: 960,\n      show: \"Grammys\",\n      artist: artist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      data: mtvData,\n      awards: mtvAwards,\n      awardCountForArist: mtvCountArtist,\n      id: 'mtv',\n      height: 170,\n      width: 960,\n      show: \"MTV Video Music Awards\",\n      artist: artist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      data: billboardData,\n      awards: billboardAwards,\n      awardCountForArist: billboardCountArtist,\n      id: 'billboard',\n      height: 170,\n      width: 960,\n      show: \"Billboard Music Awards\",\n      artist: artist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"NJ+FwUH0Z0nJPhfx1Bhs5Dr2+Fs=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/reneelightner/reneelempert/react-development-course-materials/final/src/App.js"],"names":["Chart","useState","Artists","Favs","grammysJSON","mtvJSON","billboardJSON","grammysAwards","Set","map","item","mtvAwards","billboardAwards","artistArray","forEach","award","includes","push","filter","sort","artistOptions","artist","text","value","App","setArtist","favs","setFavs","grammysData","setgrammysData","grammysCountArtist","setgrammysCountArtist","mtvData","setMtvData","mtvCountArtist","setmtvCountArtist","billboardData","setBillboardData","billboardCountArtist","setbillboardCountArtist","handleArtistSelection","grammyCount","getArtistCount","mtvCount","billboardCount","data","count","k","handleFavArtist","add","theartist","currFavs","index","indexOf","splice","pickedFavs","artistText"],"mappings":"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","sourcesContent":["import './App.css';\nimport Chart from './Chart.js';\nimport {useState} from 'react';\nimport Artists from './Artists.js';\nimport Favs from './Favs.js';\nimport grammysJSON from './data/dataGrammys.json';\nimport mtvJSON from './data/dataMTV.json';\nimport billboardJSON from './data/dataBillboard.json';\n\n// award names for each award show\nconst grammysAwards = [...new Set(grammysJSON.map(item => item['AWARD']))];\nconst mtvAwards = [...new Set(mtvJSON.map(item => item['AWARD']))];\nconst billboardAwards = [...new Set(billboardJSON.map(item => item['AWARD']))];\n\n// get artist names for drop down:\n// create array of unique artist names\nlet artistArray = [...new Set(grammysJSON.map(item => item['ART-1']))];\ngrammysJSON.forEach(function (award) {\n\tif (!artistArray.includes(award['ART-2'])) {artistArray.push(award['ART-2'])}\n  if (!artistArray.includes(award['ART-3'])) {artistArray.push(award['ART-3'])}\n}); \nmtvJSON.forEach(function (award) {\n\tif (!artistArray.includes(award['ART-1'])) {artistArray.push(award['ART-1'])}\n  if (!artistArray.includes(award['ART-2'])) {artistArray.push(award['ART-2'])}\n  if (!artistArray.includes(award['ART-3'])) {artistArray.push(award['ART-3'])}\n});\nbillboardJSON.forEach(function (award) {\n\tif (!artistArray.includes(award['ART-1'])) {artistArray.push(award['ART-1'])}\n  if (!artistArray.includes(award['ART-2'])) {artistArray.push(award['ART-2'])}\n  if (!artistArray.includes(award['ART-3'])) {artistArray.push(award['ART-3'])}\n});\n// filter out any empty artists\nartistArray = artistArray.filter(item => {\n  return item !== \"\"\n})\n// sort artist array in alpa order\nartistArray = artistArray.sort();\n// make array of objects - each obj is an artist (used for drop down options)\nconst artistOptions = artistArray.map((artist) => { return {text: artist, value: artist} });\n\n// App component\nexport default function App() {\n  const [artist, setArtist] = useState('none');\n  const [favs, setFavs] = useState(['Billie Eilish', 'Taylor Swift', 'Alicia Keys', 'BeyoncÃ©']);\n  const [grammysData, setgrammysData] = useState([...grammysJSON]);\n  const [grammysCountArtist, setgrammysCountArtist] = useState(0);\n  const [mtvData, setMtvData] = useState([...mtvJSON]);\n  const [mtvCountArtist, setmtvCountArtist] = useState(0);\n  const [billboardData, setBillboardData] = useState([...billboardJSON]);\n  const [billboardCountArtist, setbillboardCountArtist] = useState(0);\n\n  const handleArtistSelection = (artist) => {\n    setArtist(artist);\n\n    let grammyCount = getArtistCount(grammysData, artist);\n    setgrammysCountArtist(grammyCount);\n\n    let mtvCount = getArtistCount(mtvData, artist);\n    setmtvCountArtist(mtvCount);\n\n    let billboardCount = getArtistCount(billboardData, artist);\n    setbillboardCountArtist(billboardCount);\n  }\n\n  function getArtistCount(data, artist) {\n    let count = 0;\n    for (let k of data) {\n      if (k['ART-1'] == artist) { count++; }\n      if (k['ART-2'] == artist) { count++; }\n      if (k['ART-3'] == artist) { count++; }\n    };\n    return count;\n  }\n\n  const handleFavArtist = (add, theartist) => {\n    let currFavs = favs;\n    if (!favs.includes(theartist) && add) {\n      currFavs.push(theartist);\n      setFavs([...currFavs]);\n    } else if (favs.includes(theartist)) {\n      let index = currFavs.indexOf(theartist);\n      currFavs.splice(index, 1);\n      setFavs([...currFavs]);\n    }\n  }\n\n  const pickedFavs = favs.map((item, index)=>{\n    return <Favs artist={item} artistSelection={handleArtistSelection} handleAristRemove={handleFavArtist}></Favs>\n  })\n\n  const artistText = () => {\n    if (artist === 'none') {\n      return 'Choose an artist to see their award(s)';\n    } else {\n      return `Awards for ${artist}`;\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Final Project</h1>\n      <h2>{artistText()}</h2>\n      <button onClick={() => {handleFavArtist(true, artist)}}>â¤ï¸</button>\n      <Artists options={artistOptions} onArtistChange={handleArtistSelection}/>\n      <div className=\"App\">\n        <span>Favorite artists:</span> \n        {pickedFavs}\n      </div>\n      <Chart data={grammysData} awards={grammysAwards} awardCountForArist={grammysCountArtist} id={'grammy'} height={130} width={960} show={\"Grammys\"} artist={artist} />\n      <Chart data={mtvData} awards={mtvAwards} awardCountForArist={mtvCountArtist} id={'mtv'} height={170} width={960} show={\"MTV Video Music Awards\"} artist={artist} />\n      <Chart data={billboardData} awards={billboardAwards} awardCountForArist={billboardCountArtist}  id={'billboard'} height={170} width={960} show={\"Billboard Music Awards\"} artist={artist} />\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}