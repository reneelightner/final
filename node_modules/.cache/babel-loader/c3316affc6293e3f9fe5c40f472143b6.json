{"ast":null,"code":"var _jsxFileName = \"/Users/reneelightner/reneelempert/react-development-course-materials/final/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Chart from './Chart.js';\nimport { useState } from 'react';\nimport Artists from './Artists.js';\nimport Favs from './Favs.js';\nimport grammysJSON from './data/dataGrammys.json';\nimport mtvJSON from './data/dataMTV.json';\nimport billboardJSON from './data/dataBillboard.json'; // award names for each award show\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst grammysAwards = [...new Set(grammysJSON.map(item => item['AWARD']))];\nconst mtvAwards = [...new Set(mtvJSON.map(item => item['AWARD']))];\nconst billboardAwards = [...new Set(billboardJSON.map(item => item['AWARD']))]; // get artist names for drop down:\n// create array of unique artist names\n\nlet artistArray = [...new Set(grammysJSON.map(item => item['ART-1']))];\ngrammysJSON.forEach(function (award) {\n  if (!artistArray.includes(award['ART-2'])) {\n    artistArray.push(award['ART-2']);\n  }\n\n  if (!artistArray.includes(award['ART-3'])) {\n    artistArray.push(award['ART-3']);\n  }\n});\nmtvJSON.forEach(function (award) {\n  if (!artistArray.includes(award['ART-1'])) {\n    artistArray.push(award['ART-1']);\n  }\n\n  if (!artistArray.includes(award['ART-2'])) {\n    artistArray.push(award['ART-2']);\n  }\n\n  if (!artistArray.includes(award['ART-3'])) {\n    artistArray.push(award['ART-3']);\n  }\n});\nbillboardJSON.forEach(function (award) {\n  if (!artistArray.includes(award['ART-1'])) {\n    artistArray.push(award['ART-1']);\n  }\n\n  if (!artistArray.includes(award['ART-2'])) {\n    artistArray.push(award['ART-2']);\n  }\n\n  if (!artistArray.includes(award['ART-3'])) {\n    artistArray.push(award['ART-3']);\n  }\n}); // filter out any empty artists\n\nartistArray = artistArray.filter(item => {\n  return item !== \"\";\n}); // sort artist array in alpa order\n\nartistArray = artistArray.sort(); // make array of objects - each obj is an artist (used for drop down options)\n\nconst artistOptions = artistArray.map(artist => {\n  return {\n    text: artist,\n    value: artist\n  };\n});\nexport default function App() {\n  _s();\n\n  const [artist, setArtist] = useState('none');\n  const [favs, setFavs] = useState(['Billie Eilish', 'Taylor Swift', 'Alicia Keys', 'BeyoncÃ©']);\n  const [grammysCountArtist, setgrammysCountArtist] = useState(0);\n  const [mtvCountArtist, setmtvCountArtist] = useState(0);\n  const [billboardCountArtist, setbillboardCountArtist] = useState(0);\n\n  const handleArtistSelection = artist => {\n    setArtist(artist);\n    let grammyCount = getArtistCount(grammysJSON, artist);\n    setgrammysCountArtist(grammyCount);\n    let mtvCount = getArtistCount(mtvJSON, artist);\n    setmtvCountArtist(mtvCount);\n    let billboardCount = getArtistCount(billboardJSON, artist);\n    setbillboardCountArtist(billboardCount);\n  };\n\n  function getArtistCount(data, artist) {\n    let count = 0;\n\n    for (let k of data) {\n      if (k['ART-1'] == artist) {\n        count++;\n      }\n\n      if (k['ART-2'] == artist) {\n        count++;\n      }\n\n      if (k['ART-3'] == artist) {\n        count++;\n      }\n    }\n\n    ;\n    return count;\n  }\n\n  const handleFavArtist = (add, theartist) => {\n    let currFavs = favs;\n\n    if (!favs.includes(theartist) && add) {\n      currFavs.push(theartist);\n      setFavs([...currFavs]);\n    } else if (favs.includes(theartist)) {\n      let index = currFavs.indexOf(theartist);\n      currFavs.splice(index, 1);\n      setFavs([...currFavs]);\n    }\n  };\n\n  const pickedFavs = favs.map((item, index) => {\n    return /*#__PURE__*/_jsxDEV(Favs, {\n      artist: item,\n      artistSelection: handleArtistSelection,\n      handleAristRemove: handleFavArtist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 12\n    }, this);\n  });\n\n  const artistText = () => {\n    if (artist === 'none') {\n      return 'Choose an artist to see their award(s)';\n    } else {\n      return `Awards for ${artist}`;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Explore Music Award Show Winners\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: artistText()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Artists, {\n      options: artistOptions,\n      onArtistChange: handleArtistSelection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        handleFavArtist(true, artist);\n      },\n      children: \"\\u2764\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Favorite artists:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), pickedFavs]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      data: grammysJSON,\n      awards: grammysAwards,\n      awardCountForArist: grammysCountArtist,\n      id: 'grammy',\n      height: 130,\n      width: 960,\n      show: \"Grammys\",\n      artist: artist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      data: mtvJSON,\n      awards: mtvAwards,\n      awardCountForArist: mtvCountArtist,\n      id: 'mtv',\n      height: 170,\n      width: 960,\n      show: \"MTV Video Music Awards\",\n      artist: artist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      data: billboardJSON,\n      awards: billboardAwards,\n      awardCountForArist: billboardCountArtist,\n      id: 'billboard',\n      height: 170,\n      width: 960,\n      show: \"Billboard Music Awards\",\n      artist: artist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"EpXDTk5NspkFAK66BmPgGZtHLYQ=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/reneelightner/reneelempert/react-development-course-materials/final/src/App.js"],"names":["Chart","useState","Artists","Favs","grammysJSON","mtvJSON","billboardJSON","grammysAwards","Set","map","item","mtvAwards","billboardAwards","artistArray","forEach","award","includes","push","filter","sort","artistOptions","artist","text","value","App","setArtist","favs","setFavs","grammysCountArtist","setgrammysCountArtist","mtvCountArtist","setmtvCountArtist","billboardCountArtist","setbillboardCountArtist","handleArtistSelection","grammyCount","getArtistCount","mtvCount","billboardCount","data","count","k","handleFavArtist","add","theartist","currFavs","index","indexOf","splice","pickedFavs","artistText"],"mappings":"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","sourcesContent":["import './App.css';\nimport Chart from './Chart.js';\nimport {useState} from 'react';\nimport Artists from './Artists.js';\nimport Favs from './Favs.js';\nimport grammysJSON from './data/dataGrammys.json';\nimport mtvJSON from './data/dataMTV.json';\nimport billboardJSON from './data/dataBillboard.json';\n\n// award names for each award show\nconst grammysAwards = [...new Set(grammysJSON.map(item => item['AWARD']))];\nconst mtvAwards = [...new Set(mtvJSON.map(item => item['AWARD']))];\nconst billboardAwards = [...new Set(billboardJSON.map(item => item['AWARD']))];\n\n// get artist names for drop down:\n// create array of unique artist names\nlet artistArray = [...new Set(grammysJSON.map(item => item['ART-1']))];\ngrammysJSON.forEach(function (award) {\n\tif (!artistArray.includes(award['ART-2'])) {artistArray.push(award['ART-2'])}\n  if (!artistArray.includes(award['ART-3'])) {artistArray.push(award['ART-3'])}\n}); \nmtvJSON.forEach(function (award) {\n\tif (!artistArray.includes(award['ART-1'])) {artistArray.push(award['ART-1'])}\n  if (!artistArray.includes(award['ART-2'])) {artistArray.push(award['ART-2'])}\n  if (!artistArray.includes(award['ART-3'])) {artistArray.push(award['ART-3'])}\n});\nbillboardJSON.forEach(function (award) {\n\tif (!artistArray.includes(award['ART-1'])) {artistArray.push(award['ART-1'])}\n  if (!artistArray.includes(award['ART-2'])) {artistArray.push(award['ART-2'])}\n  if (!artistArray.includes(award['ART-3'])) {artistArray.push(award['ART-3'])}\n});\n// filter out any empty artists\nartistArray = artistArray.filter(item => {\n  return item !== \"\"\n})\n// sort artist array in alpa order\nartistArray = artistArray.sort();\n// make array of objects - each obj is an artist (used for drop down options)\nconst artistOptions = artistArray.map((artist) => { return {text: artist, value: artist} });\n\n\n\nexport default function App() {\n  const [artist, setArtist] = useState('none');\n  const [favs, setFavs] = useState(['Billie Eilish', 'Taylor Swift', 'Alicia Keys', 'BeyoncÃ©']);\n  const [grammysCountArtist, setgrammysCountArtist] = useState(0);\n  const [mtvCountArtist, setmtvCountArtist] = useState(0);\n  const [billboardCountArtist, setbillboardCountArtist] = useState(0);\n\n  const handleArtistSelection = (artist) => {\n    setArtist(artist);\n\n    let grammyCount = getArtistCount(grammysJSON, artist);\n    setgrammysCountArtist(grammyCount);\n\n    let mtvCount = getArtistCount(mtvJSON, artist);\n    setmtvCountArtist(mtvCount);\n\n    let billboardCount = getArtistCount(billboardJSON, artist);\n    setbillboardCountArtist(billboardCount);\n  }\n\n  function getArtistCount(data, artist) {\n    let count = 0;\n    for (let k of data) {\n      if (k['ART-1'] == artist) { count++; }\n      if (k['ART-2'] == artist) { count++; }\n      if (k['ART-3'] == artist) { count++; }\n    };\n    return count;\n  }\n\n  const handleFavArtist = (add, theartist) => {\n    let currFavs = favs;\n    if (!favs.includes(theartist) && add) {\n      currFavs.push(theartist);\n      setFavs([...currFavs]);\n    } else if (favs.includes(theartist)) {\n      let index = currFavs.indexOf(theartist);\n      currFavs.splice(index, 1);\n      setFavs([...currFavs]);\n    }\n  }\n\n  const pickedFavs = favs.map((item, index)=>{\n    return <Favs artist={item} artistSelection={handleArtistSelection} handleAristRemove={handleFavArtist}></Favs>\n  })\n\n  const artistText = () => {\n    if (artist === 'none') {\n      return 'Choose an artist to see their award(s)';\n    } else {\n      return `Awards for ${artist}`;\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Explore Music Award Show Winners</h1>\n      <h3>{artistText()}</h3>\n      <Artists options={artistOptions} onArtistChange={handleArtistSelection}/>\n      <button onClick={() => {handleFavArtist(true, artist)}}>â¤ï¸</button>\n      <div className=\"App\">\n        <span>Favorite artists:</span> \n        {pickedFavs}\n      </div>\n      <Chart data={grammysJSON} awards={grammysAwards} awardCountForArist={grammysCountArtist} id={'grammy'} height={130} width={960} show={\"Grammys\"} artist={artist} />\n      <Chart data={mtvJSON} awards={mtvAwards} awardCountForArist={mtvCountArtist} id={'mtv'} height={170} width={960} show={\"MTV Video Music Awards\"} artist={artist} />\n      <Chart data={billboardJSON} awards={billboardAwards} awardCountForArist={billboardCountArtist}  id={'billboard'} height={170} width={960} show={\"Billboard Music Awards\"} artist={artist} />\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}